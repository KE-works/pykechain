{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.0.0"], "Authorization": ["Token <AUTH_TOKEN>"]}, "method": "GET", "uri": "<API_URL>/api/scopes.json?name=Bike+Project+%28pykechain+testing%29&status=ACTIVE"}, "response": {"body": {"encoding": null, "base64_string": "H4sIAAAAAAAAA6VUUWvbMBD+K8VPG0SJLdmS3aduXR8Ggw02+jJKkKVz4sSWjCS3KyX/fWfHSZOSh0IfDL7T6b7vO3/nl8iB75vgo+u/L1Hvmug6WofQ+evFYguKyq6eb4GotazNXNl2gYmFV7YDv+CVKFVRxYTSHEiqmSSFVjEBlUmRacEg0fONtyaaRbXGxu+5gLVGtoDVX+stXP1ydgMqXH3qnpHOwOIqgA+1WX3GygD/Albimw8y9Cgi+nL75/v93XDmpPF1qK3Za1vXq3WDTwCkElwPJ5duf/z8ffftFXqMo93DLJLe1ysDmDR908yiFtoS3L4jtLIe5lXelHPTDCL9UqpQP8IBABOtNHIF7jQztjgkeg9uQh2EHcr3E6NHRtFu9gr4cajjNCcgcRlIvktZJRv/DmlDOMGxy3Abq9bQzrEFGO1v0HdP1m394LuPSz5vPhHhJ0QeRkO4sNQyHL+37uEsLnu1BfTcy97RaRzHLKOCJLgqJBVckpwKdHQpMkGBFwAxQrVWQ7N01g5uFQWVTJVA8CbHLShSkqd5RUqlyqpkNK4UG+gZZGMUHK5VGU0YY0BkApqkwDNSJpyToiiqIpEsV1WC04w6Z1e402jReC4SkeV5kTJOWUpRLOg6yLI5jnCYb9XYpxFkOUpiPKcVVzmRDCFSTocljRVhXDGFFDMuEqTXgWtrXI5xvfDP0e2nNI19jJYOWvsIbz/SdCi1fnui0SXOPh9C5WDsOflrHy5VY81rEnP6UuNzF5zTOTnb7R52/wGvBU1FAwUAAA==", "string": ""}, "headers": {"Server": ["nginx/1.12.2"], "Date": ["Tue, 20 Mar 2018 10:06:32 GMT"], "Content-Type": ["application/json"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Encoding", "Accept, Cookie"], "Allow": ["GET, POST, HEAD, OPTIONS"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "X-Frame-Options": ["SAMEORIGIN"], "X-Content-Type-Options": ["nosniff"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/scopes.json?name=Bike+Project+%28pykechain+testing%29&status=ACTIVE"}, "recorded_at": "2018-03-20T10:06:32"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.0.0"], "Authorization": ["Token <AUTH_TOKEN>"]}, "method": "GET", "uri": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d"}, "response": {"body": {"encoding": null, "base64_string": "H4sIAAAAAAAAA41RzU+DMBT/V5aeV6ClfIyrF73oolzUGNK1j6yOAWkLuiz7332MGTx6e+/32byeiQU3NN6R4v1MjCYFEVzkec4SmmaMUaEV0F0kBRUi40ynKpdZQtZksA2K9973rgjDAyguexMcgKq9NG2gumOIQOjAjkaBC/8TG3y6rsXsVh4Bw0twfuXkCKtbysopa3qPCg3zaFBfEASc6vrJk9bZTm3qiHKeA9bEkm60iiioBAt0FgPTV/nkrmrTQHVr89hWTW3VTAb9aRH60zV9+1rePz2uXu6eH7blwo5g3fwSFkQIQzv+weJgulcP9mjcBOGtz0RZkB4ja9k4WOMveGsAu+Eb1DAR3g6ID72Wy4Ye/Tt/WbMQeA5vu9O8Xn5tupIe+3nEchrFlPGS8UKkRcwCkWzyOH4jl4/LD4OFG10DAgAA", "string": ""}, "headers": {"Server": ["nginx/1.12.2"], "Date": ["Tue, 20 Mar 2018 10:06:32 GMT"], "Content-Type": ["application/json"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Encoding", "Accept, Cookie"], "Allow": ["GET, POST, HEAD, OPTIONS"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "X-Frame-Options": ["SAMEORIGIN"], "X-Content-Type-Options": ["nosniff"], "Content-Encoding": ["gzip"]}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d"}, "recorded_at": "2018-03-20T10:06:32"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.0.0"], "Authorization": ["Token <AUTH_TOKEN>"]}, "method": "GET", "uri": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download"}, "response": {"body": {"encoding": "ISO-8859-1", "string": "#!/usr/bin/env python\n\n\"\"\"\nDebugging script returning the environment etc\n\"\"\"\n\nimport os\nimport platform\nimport sys\nimport time\nfrom pprint import pprint\n\n\ndef main(*args, **kwargs):\n    start = time.time()\n    foo, bar = \"cow says\", \"moo!\"\n    print('>>> starting on {}'.format(time.strftime('%c', time.gmtime(start))))\n    print('--- arguments: {}'.format(args))\n    print('--- keyword arguments: {}'.format(kwargs))\n    print('--- local variables dict: {}'.format(dir()))\n    pprint('--- environment: {}'.format(os.environ), width=120)\n    pprint('--- platform details (uname): {}'.format(platform.uname()), width=120)\n    pprint('--- python paths: {}'.format(sys.path), width=120)\n    mark_1 = time.time()\n    print('<<< intermediate timing on {}, duration: {}'.format(time.strftime('%c', time.gmtime(mark_1)), mark_1 - start))\n    print('--- python pip packages installed \\n{}'.format(os.popen('pip freeze').readlines()))\n    try:\n        import pykechain\n        print('--- importing pykechain version: {}'.format(pykechain.version))\n    except ImportError:\n        print('/!\\ pykechain is not installed, please install pykechain version 1.12 or later')\n\n    mark_2 = time.time()\n\n    from envparse import env\n    if not env('KECHAIN_URL', None) or not env('KECHAIN_TOKEN', None) or not env('KECHAIN_SCOPE_ID', None):\n        print('/!\\ cannot interact using pykechain as environment variables KECHAIN_URL, KECHAIN_TOKEN and '\n              'KECHAIN_SCOPE_ID are not set')\n    else:\n        project = pykechain.get_project()\n        mark_3 = time.time()\n        print(\"--- retrieving project '{}' from kechain (url: {})\".format(project.name, env('KECHAIN_URL')))\n        print(\"--- {} activities, {} parts\".format(len(project.activities()), len(project.parts())))\n        print(\"--- retrieving as user: '{}\".format(env('KECHAIN_USERNAME')))\n        print(\"<<< interaction with ke-chain took: {}s\".format(mark_3-mark_2))\n\n    end = time.time()\n    print('<<< ending on {}, duration: {}'.format(time.strftime('%c', time.gmtime(end)), end - start))\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}, "headers": {"Server": ["nginx/1.12.2"], "Date": ["Tue, 20 Mar 2018 10:06:32 GMT"], "Content-Type": ["text/x-python"], "Content-Length": ["2102"], "Connection": ["keep-alive"], "Allow": ["GET, HEAD, OPTIONS"], "Vary": ["Accept, Cookie"], "X-XSS-Protection": ["1; mode=block"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "Content-Disposition": ["attachment; filename=\"test_save_script.py\""], "X-Frame-Options": ["SAMEORIGIN"], "X-Content-Type-Options": ["nosniff"]}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download"}, "recorded_at": "2018-03-20T10:06:32"}], "recorded_with": "betamax/0.8.1"}