{"http_interactions": [{"request": {"method": "GET", "body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.2.1"], "Authorization": ["Token <AUTH_TOKEN>"]}, "uri": "<API_URL>/api/scopes.json?name=Bike+Project+%28pykechain+testing%29&status=ACTIVE"}, "recorded_at": "2018-05-23T15:12:09", "response": {"status": {"message": "OK", "code": 200}, "body": {"encoding": null, "base64_string": "H4sIAAAAAAAAA5VTUW/TMBD+K5OfQKrbxG7sZE+DsQckJJBAvKCpcuxLmzWxI9vZQFX/O5cm7dYJEH2IFJ+/u++783c74iH0TQzk+seO9L4h12QTYxeuF4staKa6er4FqjeqtnPt2gUGFkG7DsJCVLLURZVQxnKgS8MVLYxOKOhMycxIDqmZPwRnyYzUBgv/TwJirWoB0e/rLVx98e4BdLx60/1COYOKqwgh1nb9FpERfkZE4l+IKvbYBHl3++3j97vhzisb6lg7O/Z2Qtx++vz17gMiNvV60+AXAcVF38OJ+gAh+/sZUSHUawsYtH3TzEgLbQl+mlYAPyWc1A2thpXSsX6EY1EMjGnHALSqbkbdw1zkCFFWrZ8xU2Gyn50RDc0Px4t41E05t83Exs/ZKtWEv9M9OL2Bdo41wZpwEel56g2a6Mn5bRhMNCkRF/Z9RF6ionzZOvsn4f3BRT6ujIqn9zY9nJ3LXm8BPbcbHb1MkoRnTNIUV4UupVA0ZxIdXcpMMhAFQDKQW6xsNay8c4Nhq4ylnHOgKgVDlyAyWqZC0KIoqiJVPNdVimmtM9Acc2TBFNclUCQUuDzFkubLvKKl1mVVcpZUmuPUSOfdGncaLZrMi4wJlvNUplLmKfoMTB1V2ZzmNjxJ1binA8nq0BIXOauEzqniKGsp2LCkiaZcaK6RKxNy0NaBb2tcjsN67Yj2cJjSZCeDz+XdryMNXp5WrO+Gea48tO4RXj/GWGalG2efi00ZypjX8Fe1zhzwMusPF+Npv7/f/wZ51nM1AwUAAA==", "string": ""}, "headers": {"Date": ["Wed, 23 May 2018 15:12:09 GMT"], "Connection": ["keep-alive"], "Vary": ["Accept-Encoding", "Accept, Cookie"], "Content-Type": ["application/json"], "Server": ["nginx/1.12.2"], "X-Content-Type-Options": ["nosniff"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "X-XSS-Protection": ["1; mode=block"], "Content-Encoding": ["gzip"], "Transfer-Encoding": ["chunked"], "Allow": ["GET, POST, HEAD, OPTIONS"], "X-Frame-Options": ["SAMEORIGIN"]}, "url": "<API_URL>/api/scopes.json?name=Bike+Project+%28pykechain+testing%29&status=ACTIVE"}}, {"request": {"method": "GET", "body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.2.1"], "Authorization": ["Token <AUTH_TOKEN>"]}, "uri": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d"}, "recorded_at": "2018-05-23T15:12:09", "response": {"status": {"message": "OK", "code": 200}, "body": {"encoding": null, "base64_string": "H4sIAAAAAAAAA42QT1ODMBDFvwqTswESwp9y9aIX7SgXdRwmTZZpLAUmCWin0+/uUtqpR2+7b395b7NHYsGNrXek/DgSo0lJBBdFUbCUZjljVGgFdBNLQYXIOdOZKmSekjsy2hbhrfeDK6NoB4rLwYQ7oGorTReqfh+hEDmwk1Hgov/Yhl+u79C7k3tA8wqcD5ycILi4BE5ZM3gkNCylQb4kKDjVD/ObrMk3atXElPMCMCaRdKVVTEGlGKDzBJg+4/PrujEt1Jc0j2n1nFYvw3A43EB/OLuv36qH56fg9f7lcV3dphNYt2zCwhhl6KY/WhLO9xrA7o2bJbz1kSgL0qNlI1sH5/942x9I6e2ILQ71tf62ZgaXZhy0vHUWvDWAG8MPqPGqn66YrqXHfB6zgsYJZbxivBRZmbBQpKsiSd7J6fP0Cxq7yRQDAgAA", "string": ""}, "headers": {"Date": ["Wed, 23 May 2018 15:12:09 GMT"], "Connection": ["keep-alive"], "Vary": ["Accept-Encoding", "Accept, Cookie"], "Content-Type": ["application/json"], "Server": ["nginx/1.12.2"], "X-Content-Type-Options": ["nosniff"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "X-XSS-Protection": ["1; mode=block"], "Content-Encoding": ["gzip"], "Transfer-Encoding": ["chunked"], "Allow": ["GET, POST, HEAD, OPTIONS"], "X-Frame-Options": ["SAMEORIGIN"]}, "url": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d"}}, {"request": {"method": "GET", "body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.18.4"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Accept-Encoding": ["gzip, deflate"], "X-Requested-With": ["XMLHttpRequest"], "PyKechain-Version": ["2.2.1"], "Authorization": ["Token <AUTH_TOKEN>"]}, "uri": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download"}, "recorded_at": "2018-05-23T15:12:09", "response": {"status": {"message": "OK", "code": 200}, "body": {"encoding": "ISO-8859-1", "string": "#!/usr/bin/env python\n\n\"\"\"\nDebugging script returning the environment etc\n\"\"\"\n\nimport os\nimport platform\nimport sys\nimport time\nfrom pprint import pprint\n\n\ndef main(*args, **kwargs):\n    start = time.time()\n    foo, bar = \"cow says\", \"moo!\"\n    print('>>> starting on {}'.format(time.strftime('%c', time.gmtime(start))))\n    print('--- arguments: {}'.format(args))\n    print('--- keyword arguments: {}'.format(kwargs))\n    print('--- local variables dict: {}'.format(dir()))\n    pprint('--- environment: {}'.format(os.environ), width=120)\n    pprint('--- platform details (uname): {}'.format(platform.uname()), width=120)\n    pprint('--- python paths: {}'.format(sys.path), width=120)\n    mark_1 = time.time()\n    print('<<< intermediate timing on {}, duration: {}'.format(time.strftime('%c', time.gmtime(mark_1)), mark_1 - start))\n    print('--- python pip packages installed \\n{}'.format(os.popen('pip freeze').readlines()))\n    try:\n        import pykechain\n        print('--- importing pykechain version: {}'.format(pykechain.version))\n    except ImportError:\n        print('/!\\ pykechain is not installed, please install pykechain version 1.12 or later')\n\n    mark_2 = time.time()\n\n    from envparse import env\n    if not env('KECHAIN_URL', None) or not env('KECHAIN_TOKEN', None) or not env('KECHAIN_SCOPE_ID', None):\n        print('/!\\ cannot interact using pykechain as environment variables KECHAIN_URL, KECHAIN_TOKEN and '\n              'KECHAIN_SCOPE_ID are not set')\n    else:\n        project = pykechain.get_project()\n        mark_3 = time.time()\n        print(\"--- retrieving project '{}' from kechain (url: {})\".format(project.name, env('KECHAIN_URL')))\n        print(\"--- {} activities, {} parts\".format(len(project.activities()), len(project.parts())))\n        print(\"--- retrieving as user: '{}\".format(env('KECHAIN_USERNAME')))\n        print(\"<<< interaction with ke-chain took: {}s\".format(mark_3-mark_2))\n\n    end = time.time()\n    print('<<< ending on {}, duration: {}'.format(time.strftime('%c', time.gmtime(end)), end - start))\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}, "headers": {"Date": ["Wed, 23 May 2018 15:12:09 GMT"], "Connection": ["keep-alive"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Length": ["2102"], "Content-Type": ["text/x-python"], "Server": ["nginx/1.12.2"], "X-Content-Type-Options": ["nosniff"], "Strict-Transport-Security": ["max-age=10886400; includeSubDomains"], "X-XSS-Protection": ["1; mode=block"], "Content-Disposition": ["attachment; filename=\"test_save_script.py\""], "Allow": ["GET, HEAD, OPTIONS"], "Vary": ["Accept, Cookie"]}, "url": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download"}}], "recorded_with": "betamax/0.8.1"}