{"recorded_with": "betamax/0.8.0", "http_interactions": [{"response": {"headers": {"Transfer-Encoding": "chunked", "Date": "Mon, 12 Mar 2018 11:07:02 GMT", "X-XSS-Protection": "1; mode=block", "Strict-Transport-Security": "max-age=518400; includeSubDomains", "Server": "nginx/1.12.2", "Connection": "keep-alive", "Content-Encoding": "gzip", "Vary": "Accept-Encoding", "Content-Type": "application/json", "X-Frame-Options": "SAMEORIGIN", "Allow": "GET, POST, HEAD, OPTIONS", "X-Content-Type-Options": "nosniff"}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/scopes.json?status=ACTIVE&name=Bike+Project+%28pykechain+testing%29", "body": {"encoding": null, "string": "", "base64_string": "H4sIAAAAAAAAA5VUbWvbMBD+K0WfNogSWfKb8qlb1w+DwQYr/bBRgiydEze2ZCS5Wyn57zvnrUkZLMM2WHfP3XN3fs4vxEMY2hjI/OcLGXxL5mQVYx/ms9kaNFd9M10D1SvV2Kl23QwNs6BdD2GW10WlZc0o5yXQ1AhFpdGMgs5UkZlCQGKmj8FZMiGNwcSXBCDWqg4Q/bFZw9U37x5Bx6t3/TOWM1ZxFSHExi7fIzLC74hIfAtRxQGbIB9u7j7f344+r2xoYuPsrrcj4ubL1++3nxCxaparFp8IWFz0AxyptxCyeZgQFUKztIBGO7TthHTQVeB3GaFTzTiv6rqa2nZsMix2/kO60aCsWp5YkIofeXYxSsfmCQ6IIYDfu8dOD/GbySvh5VTFpVTH8Z4RqYs6q1Ub9nzif1obj2d0j06voJsiDVgTrlF3v5xfh1F3l7ecX1rCOdv2a6NGfFwYFUc/Z0lBWUJ5fsfFnDG8f2BKM8A/ENWg14C6fCGdM9AuvHOjSgvJldAVUCayHNUvU1qmZU0rrau6EpzVWowlW6zCajiE1RlPhBBAVQKGppBntErynEopa5koUeo6OSxYyhgm5wVNcHNpWuSKlrzABauKrOCQSwCGEye9dxrCuAzMKMikkLQUQtO0LBStZJ5SlplUC5A1aEm2AUu/jWDTPOXF6TUhYJqoqvY45B581+DibFcP/yr9OK+Fh849wZtvuPMdTtrD9rRX1O640K2zr0aDyvHu+TzBQhnzVgynnr9wHus5j0LK/d9gs3nY/AE34ZnVHwUAAA=="}}, "request": {"headers": {"Connection": "keep-alive", "PyKechain-Version": "1.15.4", "Authorization": "Token <AUTH_TOKEN>", "Accept-Encoding": "gzip, deflate", "User-Agent": "python-requests/2.18.4", "X-Requested-With": "XMLHttpRequest", "Accept": "*/*"}, "uri": "<API_URL>/api/scopes.json?status=ACTIVE&name=Bike+Project+%28pykechain+testing%29", "method": "GET", "body": {"encoding": "utf-8", "string": ""}}, "recorded_at": "2018-03-12T11:07:02"}, {"response": {"headers": {"Transfer-Encoding": "chunked", "Date": "Mon, 12 Mar 2018 11:07:02 GMT", "X-XSS-Protection": "1; mode=block", "Strict-Transport-Security": "max-age=518400; includeSubDomains", "Server": "nginx/1.12.2", "Connection": "keep-alive", "Content-Encoding": "gzip", "Vary": "Accept-Encoding", "Content-Type": "application/json", "X-Frame-Options": "SAMEORIGIN", "Allow": "GET, POST, HEAD, OPTIONS", "X-Content-Type-Options": "nosniff"}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/services.json?name=Debug+pykechain&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d", "body": {"encoding": null, "string": "", "base64_string": "H4sIAAAAAAAAA42RQXOCMBCF/wqTcwMhQUCu7aG9WKc6zminw4Rk0VQFJgm2jON/b8BaPPaW9/bl253dM9Jg2oM1KHs/IyVRhuJYJHEqGU5FLHHECeAiiUocFQwmJZ9SKRh6QK0+uPDO2sZkQbAHQXmj/D1gseOq8kV9DJwRGNAnJcAE/8H6n6auHLviR3DwJyjardd0Dt4zXUGCEVo1VrlYhhbD2ytr7ck+ulXV1pvfxY2omx4Ul0khpiXBlKaAI8k4nkpBMIgJTyYyYRDKId7z8lIdIP8dYeDmfyPkm/VqttoXftONedsNTebr5fPrzFs8vr3Ml2P1BNpcxw194myoTnce8yfOa0Aflektd4cz+tLKOqLVLbg9N5KPSmgYVMkPxkmn5K2kwWoFJ8jhG0Q7fnE7s7rurvJyA8qcW9efkjDFhOGQLkmaMZpFxCeEsnS6QZePyw/VB0uEHwIAAA=="}}, "request": {"headers": {"Connection": "keep-alive", "PyKechain-Version": "1.15.4", "Authorization": "Token <AUTH_TOKEN>", "Accept-Encoding": "gzip, deflate", "User-Agent": "python-requests/2.18.4", "X-Requested-With": "XMLHttpRequest", "Accept": "*/*"}, "uri": "<API_URL>/api/services.json?name=Debug+pykechain&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d", "method": "GET", "body": {"encoding": "utf-8", "string": ""}}, "recorded_at": "2018-03-12T11:07:02"}, {"response": {"headers": {"Content-Length": "2102", "Date": "Mon, 12 Mar 2018 11:07:02 GMT", "Content-Disposition": "attachment; filename=\"debug_pykechain_ZYVNVkb.py\"", "X-XSS-Protection": "1; mode=block", "Strict-Transport-Security": "max-age=518400; includeSubDomains", "Server": "nginx/1.12.2", "Connection": "keep-alive", "Vary": "Accept, Cookie", "Content-Type": "text/x-python", "X-Frame-Options": "SAMEORIGIN", "Allow": "GET, HEAD, OPTIONS", "X-Content-Type-Options": "nosniff"}, "status": {"code": 200, "message": "OK"}, "url": "<API_URL>/api/services/66c768d3-8c6d-4a0e-b74f-4b3e5fa92dc3/download", "body": {"encoding": "ISO-8859-1", "string": "#!/usr/bin/env python\n\n\"\"\"\nDebugging script returning the environment etc\n\"\"\"\n\nimport os\nimport platform\nimport sys\nimport time\nfrom pprint import pprint\n\n\ndef main(*args, **kwargs):\n    start = time.time()\n    foo, bar = \"cow says\", \"moo!\"\n    print('>>> starting on {}'.format(time.strftime('%c', time.gmtime(start))))\n    print('--- arguments: {}'.format(args))\n    print('--- keyword arguments: {}'.format(kwargs))\n    print('--- local variables dict: {}'.format(dir()))\n    pprint('--- environment: {}'.format(os.environ), width=120)\n    pprint('--- platform details (uname): {}'.format(platform.uname()), width=120)\n    pprint('--- python paths: {}'.format(sys.path), width=120)\n    mark_1 = time.time()\n    print('<<< intermediate timing on {}, duration: {}'.format(time.strftime('%c', time.gmtime(mark_1)), mark_1 - start))\n    print('--- python pip packages installed \\n{}'.format(os.popen('pip freeze').readlines()))\n    try:\n        import pykechain\n        print('--- importing pykechain version: {}'.format(pykechain.version))\n    except ImportError:\n        print('/!\\ pykechain is not installed, please install pykechain version 1.12 or later')\n\n    mark_2 = time.time()\n\n    from envparse import env\n    if not env('KECHAIN_URL', None) or not env('KECHAIN_TOKEN', None) or not env('KECHAIN_SCOPE_ID', None):\n        print('/!\\ cannot interact using pykechain as environment variables KECHAIN_URL, KECHAIN_TOKEN and '\n              'KECHAIN_SCOPE_ID are not set')\n    else:\n        project = pykechain.get_project()\n        mark_3 = time.time()\n        print(\"--- retrieving project '{}' from kechain (url: {})\".format(project.name, env('KECHAIN_URL')))\n        print(\"--- {} activities, {} parts\".format(len(project.activities()), len(project.parts())))\n        print(\"--- retrieving as user: '{}\".format(env('KECHAIN_USERNAME')))\n        print(\"<<< interaction with ke-chain took: {}s\".format(mark_3-mark_2))\n\n    end = time.time()\n    print('<<< ending on {}, duration: {}'.format(time.strftime('%c', time.gmtime(end)), end - start))\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}}, "request": {"headers": {"Connection": "keep-alive", "PyKechain-Version": "1.15.4", "Authorization": "Token <AUTH_TOKEN>", "Accept-Encoding": "gzip, deflate", "User-Agent": "python-requests/2.18.4", "X-Requested-With": "XMLHttpRequest", "Accept": "*/*"}, "uri": "<API_URL>/api/services/66c768d3-8c6d-4a0e-b74f-4b3e5fa92dc3/download", "method": "GET", "body": {"encoding": "utf-8", "string": ""}}, "recorded_at": "2018-03-12T11:07:03"}]}