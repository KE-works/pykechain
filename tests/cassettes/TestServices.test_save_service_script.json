{"recorded_with": "betamax/0.8.0", "http_interactions": [{"response": {"status": {"message": "OK", "code": 200}, "body": {"base64_string": "H4sIAAAAAAAAA61UwW7bMAz9lUKnDYgS27Itu6duXQ8DBmzAhl6GIqAlOnFjS4YktyuK/PvouDGSnAashwQh9cTHJz7mlTn0Qxs8u/79ygbXsmu2DaH316vVDpWAvlnukKstNGapbLeixMor26Nf5bWsVFlHPEkK5KkWwEutIo4qA5lpKTDWy0dvDVuwRlPhf7lAWAMdEvpzs8OrH84+ogpXH/oXamfs4iqgD43ZfCRkwD+BkPTLBwgDiWCfbn99vb8bzxwY34TGmknbjLj99v3n3RdCbJvNtqVPQGouuAFn6gOE7R8WDLxvNgYpaYa2XbAOuwrdVHHUlJA0v+7AwAbdsQplQIXmCU8S08ULHmpi8OjeolHYsdKCYQfNOI3qplqalu0XE6F8R8L5TU/oZiJxTlRD6/9P2hieEMG5rvwddT1atcVuSTA02p9wnh/ckLGfrdv50diHaZNHXFhrCPO89YBncTWoHZLnpqZZGkWRyBLJY5UAT2UOvEgkObqSmUwwLxGj0f2GKhuFa2ftaNg6S2IhBHKIUfMU84xXcZ7zsizrMgZRqDqma53V2B7vyDIBoSrkRJjT8pQpL9Ki5pVSVV2JJKqVoNdkvbMb2mmyaLTMkyTPyjKV9CVpoKibAFU7P+eovm7t84FjfVAUi1TWMlK8KhJqDeKCA0LOdZGBwrpEXRTUWo+ua2g3DttFfxz9+Ehr0PpyhA5h3q43lMPOPuHFIKezY6ToGiFVaw3O3puSc3hR7ZxWk+GcfblgPvR3QrvfP+z/AtIHm8gCBQAA", "string": "", "encoding": null}, "headers": {"Allow": "GET, POST, HEAD, OPTIONS", "Transfer-Encoding": "chunked", "Strict-Transport-Security": "max-age=10886400; includeSubDomains", "Vary": "Accept-Encoding", "X-XSS-Protection": "1; mode=block", "X-Frame-Options": "SAMEORIGIN", "Content-Type": "application/json", "Date": "Wed, 14 Mar 2018 16:15:41 GMT", "X-Content-Type-Options": "nosniff", "Server": "nginx/1.12.2", "Content-Encoding": "gzip", "Connection": "keep-alive"}, "url": "<API_URL>/api/scopes.json?status=ACTIVE&name=Bike+Project+%28pykechain+testing%29"}, "recorded_at": "2018-03-14T16:15:41", "request": {"method": "GET", "uri": "<API_URL>/api/scopes.json?status=ACTIVE&name=Bike+Project+%28pykechain+testing%29", "body": {"string": "", "encoding": "utf-8"}, "headers": {"X-Requested-With": "XMLHttpRequest", "Accept-Encoding": "gzip, deflate", "Accept": "*/*", "PyKechain-Version": "2.0.0-rc6", "User-Agent": "python-requests/2.18.4", "Authorization": "Token <AUTH_TOKEN>", "Connection": "keep-alive"}}}, {"response": {"status": {"message": "OK", "code": 200}, "body": {"base64_string": "H4sIAAAAAAAAA41Qy26DMBD8FeRzDRjzCtde2ksbtVzaqkKOvShuCCDb0EZR/r0LJKLH3nZnZmdWcyYG7NA4S4qPM9GKFCSO4jzPWULTjDEaKwl0F4qYxnEWMZXKXGQJuSODaVC8d663RRAcQHLRa/8AVO6Fbn3ZHQMEAgtm1BJs8B9b/8t2LXq34ghoXoJ1nhUjeFcXz0qje4cKBcuoUV8QBKzs+ukmrbOd3NQhjaIcMIYLulEypCATDFAZB6Zm+XRd1bqB6prmMK2a0qqF9PvTKnSn2X37Vj48P3mv9y+P23JlRzB2+YT5IcLQjn8w7k999WCO2k4Qdn3G2p3RgGHwA3JwaO7MAFhrr8S6fRu9LtLATNWisTBX4Ex3urFIqmW+3FxUJRzmRyHLacgpi0oWFXFacObHySbn/J1cPi+/0HJ+kwMCAAA=", "string": "", "encoding": null}, "headers": {"Allow": "GET, POST, HEAD, OPTIONS", "Transfer-Encoding": "chunked", "Strict-Transport-Security": "max-age=10886400; includeSubDomains", "Vary": "Accept-Encoding", "X-XSS-Protection": "1; mode=block", "X-Frame-Options": "SAMEORIGIN", "Content-Type": "application/json", "Date": "Wed, 14 Mar 2018 16:15:41 GMT", "X-Content-Type-Options": "nosniff", "Server": "nginx/1.12.2", "Content-Encoding": "gzip", "Connection": "keep-alive"}, "url": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d"}, "recorded_at": "2018-03-14T16:15:41", "request": {"method": "GET", "uri": "<API_URL>/api/services.json?name=Test+save+service+script&scope=6f7bc9f0-228e-4d3a-9dc0-ec5a75d73e1d", "body": {"string": "", "encoding": "utf-8"}, "headers": {"X-Requested-With": "XMLHttpRequest", "Accept-Encoding": "gzip, deflate", "Accept": "*/*", "PyKechain-Version": "2.0.0-rc6", "User-Agent": "python-requests/2.18.4", "Authorization": "Token <AUTH_TOKEN>", "Connection": "keep-alive"}}}, {"response": {"status": {"message": "OK", "code": 200}, "body": {"string": "#!/usr/bin/env python\n\n\"\"\"\nDebugging script returning the environment etc\n\"\"\"\n\nimport os\nimport platform\nimport sys\nimport time\nfrom pprint import pprint\n\n\ndef main(*args, **kwargs):\n    start = time.time()\n    foo, bar = \"cow says\", \"moo!\"\n    print('>>> starting on {}'.format(time.strftime('%c', time.gmtime(start))))\n    print('--- arguments: {}'.format(args))\n    print('--- keyword arguments: {}'.format(kwargs))\n    print('--- local variables dict: {}'.format(dir()))\n    pprint('--- environment: {}'.format(os.environ), width=120)\n    pprint('--- platform details (uname): {}'.format(platform.uname()), width=120)\n    pprint('--- python paths: {}'.format(sys.path), width=120)\n    mark_1 = time.time()\n    print('<<< intermediate timing on {}, duration: {}'.format(time.strftime('%c', time.gmtime(mark_1)), mark_1 - start))\n    print('--- python pip packages installed \\n{}'.format(os.popen('pip freeze').readlines()))\n    try:\n        import pykechain\n        print('--- importing pykechain version: {}'.format(pykechain.version))\n    except ImportError:\n        print('/!\\ pykechain is not installed, please install pykechain version 1.12 or later')\n\n    mark_2 = time.time()\n\n    from envparse import env\n    if not env('KECHAIN_URL', None) or not env('KECHAIN_TOKEN', None) or not env('KECHAIN_SCOPE_ID', None):\n        print('/!\\ cannot interact using pykechain as environment variables KECHAIN_URL, KECHAIN_TOKEN and '\n              'KECHAIN_SCOPE_ID are not set')\n    else:\n        project = pykechain.get_project()\n        mark_3 = time.time()\n        print(\"--- retrieving project '{}' from kechain (url: {})\".format(project.name, env('KECHAIN_URL')))\n        print(\"--- {} activities, {} parts\".format(len(project.activities()), len(project.parts())))\n        print(\"--- retrieving as user: '{}\".format(env('KECHAIN_USERNAME')))\n        print(\"<<< interaction with ke-chain took: {}s\".format(mark_3-mark_2))\n\n    end = time.time()\n    print('<<< ending on {}, duration: {}'.format(time.strftime('%c', time.gmtime(end)), end - start))\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "encoding": "ISO-8859-1"}, "headers": {"Allow": "GET, HEAD, OPTIONS", "Strict-Transport-Security": "max-age=10886400; includeSubDomains", "Vary": "Accept, Cookie", "X-XSS-Protection": "1; mode=block", "X-Frame-Options": "SAMEORIGIN", "Content-Type": "text/x-python", "Content-Disposition": "attachment; filename=\"test_save_script.py\"", "Date": "Wed, 14 Mar 2018 16:15:41 GMT", "X-Content-Type-Options": "nosniff", "Server": "nginx/1.12.2", "Content-Length": "2102", "Connection": "keep-alive"}, "url": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download"}, "recorded_at": "2018-03-14T16:15:41", "request": {"method": "GET", "uri": "<API_URL>/api/services/42488815-6711-4dce-b0a4-44721d6c8a75/download", "body": {"string": "", "encoding": "utf-8"}, "headers": {"X-Requested-With": "XMLHttpRequest", "Accept-Encoding": "gzip, deflate", "Accept": "*/*", "PyKechain-Version": "2.0.0-rc6", "User-Agent": "python-requests/2.18.4", "Authorization": "Token <AUTH_TOKEN>", "Connection": "keep-alive"}}}]}