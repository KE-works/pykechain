name: Test pykechain

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      fail-fast: False
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"] # Updated to match pyproject.toml classifiers

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel # Ensures latest setuptools and wheel for build step if needed directly
        pip install .[dev] # Installs pykechain with all dev, test, docs dependencies

    - name: Run linters and static analysis
      if: matrix.python-version == '3.12' # Run on one specific version to save CI time
      run: |
        ruff check pykechain tests
        ruff format --check pykechain tests # Optional: if you want to enforce formatting
        mypy pykechain tests # Adjust paths if you have specific `files` in mypy config

    - name: Perform Testing (all versions)
      run: |
        pytest -n auto tests # pytest is installed via .[dev]

    - name: Build and check distribution
      if: matrix.python-version == '3.12' # Run on one specific version
      run: |
        check-manifest # check-manifest is installed via .[dev]
        python -m build # build is installed via .[dev]
        twine check dist/* # twine is installed via .[dev]

    - name: Perform coverage tests and upload to coveralls.io
      if: matrix.python-version == '3.12'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        # coverage is installed via .[dev]
        coverage run --source=pykechain -m pytest -n auto tests
        coverage xml # Generate XML for coveralls
        coveralls # Uploads coverage.xml by default
